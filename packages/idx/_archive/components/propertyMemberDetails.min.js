!function(root,factory){"function"==typeof define&&define.amd?define(["stratus","lodash","angular","moment","angular-sanitize","stratus.services.idx","stratus.filters.math","stratus.filters.moment"],factory):factory(root.Stratus,root._,root.angular,root.moment)}(this,function(Stratus,_,angular,moment){const min=Stratus.Environment.get("production")?".min":"";Stratus.Components.PropertyMemberDetails={bindings:{elementId:"@",urlLoad:"@",pageTitle:"@",service:"@",memberKey:"@",memberStateLicense:"@",images:"@",openhouses:"@",googleApiKey:"@",options:"@",defaultListOptions:"@"},controller:["$scope","$attrs","$sce","$location","Model","Idx",function($scope,$attrs,$sce,$location,Model,Idx){const $ctrl=this;$ctrl.uid=_.uniqueId("property_member_details_"),Stratus.Instances[$ctrl.uid]=$scope,$scope.elementId=$attrs.elementId||$ctrl.uid,Stratus.Internals.CssLoader(Stratus.BaseUrl+"content/property/stratus/components/propertyMemberDetails"+min+".css"),$ctrl.$onInit=function(){$scope.options=$attrs.options&&_.isJSON($attrs.options)?JSON.parse($attrs.options):{},$scope.options.urlLoad=!$attrs.urlLoad||!_.isJSON($attrs.urlLoad)||JSON.parse($attrs.urlLoad),$scope.options.pageTitle=!(!$attrs.pageTitle||!_.isJSON($attrs.pageTitle))&&JSON.parse($attrs.pageTitle),$scope.options.service=$attrs.service?$attrs.service:null,$scope.options.MemberKey=$attrs.memberKey?$attrs.memberKey:null,$scope.options.MemberStateLicense=$attrs.memberStateLicense?$attrs.memberStateLicense:null,$scope.options.images=$attrs.images&&_.isJSON($attrs.images)?JSON.parse($attrs.images):{fields:["Order","MediaURL","LongDescription"]},$scope.googleApiKey=$attrs.googleApiKey||null,$scope.defaultListOptions=$attrs.defaultListOptions&&_.isJSON($attrs.defaultListOptions)?JSON.parse($attrs.defaultListOptions):{},$scope.memberMerged={},$scope.memberCombined={},Idx.registerListInstance($scope.elementId,$scope,"MemberDetails"),console.log("options",$scope.options,$attrs),$scope.fetchMember()},$scope.$watch("collection.models",async function(models){$scope.devLog("Loaded Member Data:",models),await $scope.individualMember(),$scope.options.pageTitle&&(Object.prototype.hasOwnProperty.call($scope.memberMerged,"MemberFullName")||Object.prototype.hasOwnProperty.call($scope.memberMerged,"MemberFirstName"))&&Idx.setPageTitle($scope.memberMerged.MemberFullName||$scope.memberMerged.MemberFirstName+" "+$scope.memberMerged.MemberLastName)}),$scope.getUid=function(){return $ctrl.uid},$scope.fetchMember=function(){const memberQuery={listName:"MemberDetailsList",service:[$scope.options.service],where:{}};$scope.options.MemberKey?memberQuery.where.MemberKey=$scope.options.MemberKey:$scope.options.MemberStateLicense&&(memberQuery.where.MemberStateLicense=$scope.options.MemberStateLicense),$scope.options.images&&(memberQuery.images=$scope.options.images),memberQuery.service&&(memberQuery.where.MemberKey||memberQuery.where.MemberStateLicense)?Idx.fetchMembers($scope,"collection",memberQuery,!0):console.error("No Service Id or Member Key/License is fetch from")},$scope.individualMember=function(){return new Promise(function(resolve){if($scope.collection&&$scope.collection.completed&&$scope.collection.models.length>0){$scope.memberMerged={},[].concat($scope.collection.models).reverse().forEach(function(agent){_.extend($scope.memberMerged,agent)}),$scope.memberCombined={},$scope.collection.models.map(function(agent){Object.keys(agent).forEach(function(key){(!_.isArray(agent[key])||_.isArray(agent[key])&&agent[key].length>0)&&($scope.memberCombined[key]=$scope.memberCombined[key]||[],$scope.memberCombined[key].includes(agent[key])||$scope.memberCombined[key].push(agent[key]))})})}resolve()})},$scope.getMLSName=function(){return Idx.getMLSVariables($scope.model.data._ServiceId).name},$scope.getMLSDisclaimer=function(html){let disclaimer=Idx.getMLSVariables($scope.collection.models[0]._ServiceId).disclaimer;return $scope.collection.models[0].ModificationTimestamp&&(disclaimer=`Member last updated ${moment($scope.collection.models[0].ModificationTimestamp).format("M/D/YY HH:mm a")}. ${disclaimer}`),$scope.collection.models[0].fetchDate&&(disclaimer=`Last checked ${moment($scope.model.meta.data.fetchDate).format("M/D/YY")}. ${disclaimer}`),html?$sce.trustAsHtml(disclaimer):disclaimer},$scope.remove=function(){},$scope.devLog=function(item1,item2){Stratus.Environment.get("production")||console.log(item1,item2)}}],templateUrl:Stratus.BaseUrl+"content/property/stratus/components/propertyMemberDetails"+min+".html"}});