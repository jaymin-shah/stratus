!function(root){const hamlet=root.hamlet={};root.hamlet.isCookie=function(key){return"string"==typeof document.cookie&&-1!==document.cookie.indexOf(key+"=")},hamlet.isUndefined=function(key){return void 0===this[key]}.bind(root),hamlet.isUndefined("boot")&&(root.boot={});const boot=root.boot;if(hamlet.isUndefined("cacheTime")||(boot.cacheTime=root.cacheTime),boot.dev=hamlet.isCookie("env"),boot.local=hamlet.isCookie("local"),boot.cacheTime=boot.cacheTime||"2",boot.host=boot.host||"",boot.cdn=boot.cdn||"/",boot.relative=boot.relative||"",boot.bundle=boot.bundle||"",boot.configuration=boot.configuration||{},boot.suffix=boot.dev?"":".min",boot.dashSuffix=boot.dev?"":"-min",boot.directory=boot.dev?"":"min/",boot.merge=function(destination,source){if(null===destination||null===source)return destination;for(let key in source)if(source.hasOwnProperty(key))if(Array.isArray(destination[key])){if(!Array.isArray(source[key])){console.warn("boot:",key,"is not an array in all configurations.");continue}destination[key]=destination[key].concat(source[key])}else"object"==typeof destination[key]&&destination[key]?destination[key]=boot.merge(destination[key],source[key]):destination[key]=source[key];return destination},boot.config=function(configuration,options){return"object"==typeof configuration&&boot.merge(boot.configuration,configuration.paths?configuration:{paths:configuration})},!hamlet.isUndefined("config")){let localConfig="function"==typeof root.config?root.config(boot):root.config;"object"==typeof localConfig&&localConfig&&boot.config(localConfig)}"function"!=typeof root.require&&(root.require=function(requirements,callback){const System=root.System;if(void 0===System)return;const tracker={loaded:0,total:requirements.length,modules:{}},shim=boot.configuration.shim||{},load=function(requirement){return System.import(requirement.replace(/(\.js)$/,"")).then(function(module){const wrap=shim[requirement]||{};tracker.modules[requirement]=wrap.exports?root[wrap.exports]:module,++tracker.loaded===tracker.total&&"function"==typeof callback&&callback.apply(root,requirements.map(function(key){return tracker.modules[key]}))}).catch(function(error){console.error(error)})};requirements.forEach(function(requirement){const wrap=shim[requirement]||{};wrap.deps?root.require(wrap.deps,function(){load(requirement)}):load(requirement)})})}(this);